@startuml

skinparam linetype ortho
skinparam style strictuml

package orm {
    package client {
        class DbClient << (S,Aquamarine) >> {
            - db *sql.DB
            - config config.ORMConfig
            - tables Tables
            - adapter adapter.DbAdapter

            + GetDb() *sql.DB
            + GetConfig() config.ORMConfig
            + GetAdapter() adapter.DbAdapter
            + Query(query string, args ...any) (*sql.Rows, error)
        }
    }

    package querybuilder {
        class QueryBuilder << (S,Aquamarine) >> {
            - client client.DbClient
            - adapter adapter.DbAdapter
            - query string
            - selectFields []string
            - where string
            - orderBy []string
            - limit int
            - offset int
            - relations []string
            - args []any
            - set map[string]any
            - joins []query.JoinClause
            - debug bool
            - preloads []string

            - insertSlice(sliceValue reflect.Value) error
            - preloadRelationPointer(field reflect.StructField, sliceValue reflect.Value, elemType reflect.Type) error
            - handlePreloadPtr(sliceValue reflect.Value, field reflect.StructField, rows *sql.Rows, relationFieldName string) error
            - preloadRelationSlice(field reflect.StructField, sliceValue reflect.Value, elemType reflect.Type) error
            - handlePreloadSlice(sliceValue reflect.Value, field reflect.StructField, rows *sql.Rows, relationFieldName string, relationFieldTag string) error
            - prepareOrderBy(query string) string
            - prepareWhere(query string) string
            - prepareLimit(query string) string
            - prepareOffset(query string) string
            - prepareSet(query string) string
            - handleFindRows(sliceValue reflect.Value, elemType reflect.Type, rows *sql.Rows) error
            - prepareFindQuery(elemType reflect.Type) error
            - preloadRelations(sliceValue reflect.Value, elemType reflect.Type) error

            + ExecuteBuilderQuery() (*sql.Rows, error)
            + ExecuteQuery(query string, args ...any) (*sql.Rows, error)
            + DeleteMany(entity any) error
            + InsertMap(entity any, mapFields map[string]any) error
            + InsertOne(entity any) error
            + InsertMany(entities any) error
            + OrderBy(fields ...string) *QueryBuilder
            + Limit(limit int) *QueryBuilder
            + Offset(offset int) *QueryBuilder
            + LeftJoinAndSelect(table string, condition string, selectFields ...string) *QueryBuilder
            + Debug() *QueryBuilder
            + Preload(column ...string) *QueryBuilder
            + ExecuteRaw(sql string, args ...any) (*sql.Rows, error)
            + FindOne()
            + FindMany(entities any) error
            + Select(column ...string) *QueryBuilder
            + UpdateMany(entity any) error
            + SetValues(values map[string]any) *QueryBuilder
            + UpdateMap(entity any, mapFields map[string]any) error
            + Where(condition string, args ...any) *QueryBuilder
            + AndWhere(condition string, args ...any) *QueryBuilder
            + OrWhere(condition string, args ...any) *QueryBuilder
        }
        orm.querybuilder.QueryBuilder ..> orm.client.DbClient
        orm.querybuilder.QueryBuilder ..> orm.querybuilder.QueryBuilder
    }
}

@enduml