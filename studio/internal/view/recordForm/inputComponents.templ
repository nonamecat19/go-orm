package recordForm

import (
	"github.com/nonamecat19/go-orm/studio/internal/model"
	"time"
)

templ IntegerInput(field model.FieldInfo) {
	<input
		type="number"
		name={ field.Name }
		placeholder={ "Enter " + field.Name }
		class="input input-bordered w-full"
		step="1"
		required
		min="0"
		oninvalid="this.setCustomValidity('Please enter a valid integer')"
		oninput="this.setCustomValidity('')"
	/>
	<div class="label">
		<span class="label-text-alt text-error validation-message" id={ field.Name + "-error" }></span>
	</div>
}

templ FloatInput(field model.FieldInfo) {
	<input
		type="number"
		name={ field.Name }
		placeholder={ "Enter " + field.Name }
		class="input input-bordered w-full"
		step="0.01"
		required
		oninvalid="this.setCustomValidity('Please enter a valid number')"
		oninput="this.setCustomValidity('')"
	/>
	<div class="label">
		<span class="label-text-alt text-error validation-message" id={ field.Name + "-error" }></span>
	</div>
}

templ BooleanInput(field model.FieldInfo) {
	<div class="form-control w-full">
		<label class="label cursor-pointer justify-start gap-4">
			<span class="label-text">No</span>
			<input
				type="checkbox"
				name={ field.Name }
				class="toggle toggle-primary"
			/>
			<span class="label-text">Yes</span>
		</label>
	</div>
}

templ DateTimeInput(field model.FieldInfo) {
	<div class="flex flex-col gap-2">
		<input
			type="datetime-local"
			name={ field.Name }
			class="input input-bordered w-full"
			required
			oninvalid="this.setCustomValidity('Please select a valid date and time')"
			oninput="this.setCustomValidity('')"
		/>
		<div class="text-xs text-gray-500">
			Format: YYYY-MM-DDTHH:MM:SS
		</div>
	</div>
	<div class="label">
		<span class="label-text-alt text-error validation-message" id={ field.Name + "-error" }></span>
	</div>
}

templ StringInput(field model.FieldInfo) {
	<input
		type="text"
		name={ field.Name }
		placeholder={ "Enter " + field.Name }
		class="input input-bordered w-full"
		required
		oninvalid="this.setCustomValidity('This field is required')"
		oninput="this.setCustomValidity('')"
	/>
	<div class="label">
		<span class="label-text-alt text-error validation-message" id={ field.Name + "-error" }></span>
	</div>
}

templ DefaultInput(field model.FieldInfo) {
	<input
		type="text"
		name={ field.Name }
		placeholder={ "Enter " + field.Name }
		class="input input-bordered w-full"
		required
		oninvalid="this.setCustomValidity('This field is required')"
		oninput="this.setCustomValidity('')"
	/>
	<div class="label">
		<span class="label-text-alt text-error validation-message" id={ field.Name + "-error" }></span>
	</div>
}

// Input components with value parameters
templ IntegerInputWithValue(field model.FieldInfo, value string) {
	<input
		type="number"
		name={ field.Name }
		placeholder={ "Enter " + field.Name }
		class="input input-bordered w-full"
		step="1"
		required
		min="0"
		value={ value }
		oninvalid="this.setCustomValidity('Please enter a valid integer')"
		oninput="this.setCustomValidity('')"
	/>
	<div class="label">
		<span class="label-text-alt text-error validation-message" id={ field.Name + "-error" }></span>
	</div>
}

templ FloatInputWithValue(field model.FieldInfo, value string) {
	<input
		type="number"
		name={ field.Name }
		placeholder={ "Enter " + field.Name }
		class="input input-bordered w-full"
		step="0.01"
		required
		value={ value }
		oninvalid="this.setCustomValidity('Please enter a valid number')"
		oninput="this.setCustomValidity('')"
	/>
	<div class="label">
		<span class="label-text-alt text-error validation-message" id={ field.Name + "-error" }></span>
	</div>
}

templ BooleanInputWithValue(field model.FieldInfo, checked bool) {
	<div class="form-control w-full">
		<label class="label cursor-pointer justify-start gap-4">
			<span class="label-text">No</span>
			<input
				type="checkbox"
				name={ field.Name }
				class="toggle toggle-primary"
				if checked {
					checked
				}
			/>
			<span class="label-text">Yes</span>
		</label>
	</div>
}

// formatDateTimeForInput converts various datetime formats to the HTML5 datetime-local input format (YYYY-MM-DDTHH:MM:SS)
func formatDateTimeForInput(dateStr string) string {
	// Try to parse common formats
	formats := []string{
		"01/02/2006 15:04:05", // MM/DD/YYYY HH:MM:SS
		"02/01/2006 15:04:05", // DD/MM/YYYY HH:MM:SS
		"2006/01/02 15:04:05", // YYYY/MM/DD HH:MM:SS
		"2006-01-02 15:04:05", // YYYY-MM-DD HH:MM:SS
		time.RFC3339,          // YYYY-MM-DDTHH:MM:SSZ
	}

	var t time.Time
	var err error

	for _, format := range formats {
		t, err = time.Parse(format, dateStr)
		if err == nil {
			// Successfully parsed
			break
		}
	}

	if err != nil {
		// If we couldn't parse the date, return an empty string
		// This will clear the input field rather than showing an invalid date
		return ""
	}

	return t.Format("2006-01-02T15:04:05")
}

templ DateTimeInputWithValue(field model.FieldInfo, value string) {
	<div class="flex flex-col gap-2">
		<input
			type="datetime-local"
			name={ field.Name }
			class="input input-bordered w-full"
			required
			value={ formatDateTimeForInput(value) }
			oninvalid="this.setCustomValidity('Please select a valid date and time')"
			oninput="this.setCustomValidity('')"
		/>
		<div class="text-xs text-gray-500">
			Format: YYYY-MM-DDTHH:MM:SS
		</div>
	</div>
	<div class="label">
		<span class="label-text-alt text-error validation-message" id={ field.Name + "-error" }></span>
	</div>
}

templ StringInputWithValue(field model.FieldInfo, value string) {
	<input
		type="text"
		name={ field.Name }
		placeholder={ "Enter " + field.Name }
		class="input input-bordered w-full"
		required
		value={ value }
		oninvalid="this.setCustomValidity('This field is required')"
		oninput="this.setCustomValidity('')"
	/>
	<div class="label">
		<span class="label-text-alt text-error validation-message" id={ field.Name + "-error" }></span>
	</div>
}

templ DefaultInputWithValue(field model.FieldInfo, value string) {
	<input
		type="text"
		name={ field.Name }
		placeholder={ "Enter " + field.Name }
		class="input input-bordered w-full"
		required
		value={ value }
		oninvalid="this.setCustomValidity('This field is required')"
		oninput="this.setCustomValidity('')"
	/>
	<div class="label">
		<span class="label-text-alt text-error validation-message" id={ field.Name + "-error" }></span>
	</div>
}
